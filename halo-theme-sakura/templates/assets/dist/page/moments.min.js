import { d as documentFunction, s as sakura } from "../main.min.js";
import "../assets/_commonjsHelpers-ca272635.js";
class HaloApi {
  /**
   * 实现点赞功能
   * 
   * @description: Like function
   * @param {string} group
   * @param {string} plural
   * @param {string} name
   */
  static async like(group, plural, name) {
    const response = await fetch("/apis/api.halo.run/v1alpha1/trackers/upvote", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        group,
        plural,
        name
      })
    });
    if (response.status !== 200) {
      console.error("点赞失败，请求异常");
      return;
    }
    return response;
  }
}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Moments {
  registerMomentListPagination() {
    const paginationElement = document.getElementById("moment-list-pagination");
    if (!paginationElement) {
      return;
    }
    const listPaginationLinkElement = paginationElement.querySelector("a");
    if (!listPaginationLinkElement) {
      return;
    }
    listPaginationLinkElement.addEventListener("click", (event) => {
      event.preventDefault();
      const momentContainerElement = document.querySelector(".moments-container .moments-inner");
      if (!momentContainerElement) {
        return;
      }
      const targetElement = event.target;
      const url = targetElement.href;
      targetElement.classList.add("loading");
      targetElement.textContent = "";
      fetch(url, {
        method: "GET"
      }).then((response) => response.text()).then((html) => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const momentNewContainerElement = doc.querySelector(".moments-container .moments-inner");
        if (momentNewContainerElement) {
          this.registerMomentItem(momentNewContainerElement);
          const momentListNewElements = momentNewContainerElement.querySelectorAll(".moments-item");
          if (momentListNewElements && momentListNewElements.length > 0) {
            momentListNewElements.forEach((element) => {
              momentContainerElement.appendChild(element);
              const commentScriptElement = element.querySelector(".comment-box .comment script:last-of-type");
              const code = (commentScriptElement == null ? void 0 : commentScriptElement.text) || (commentScriptElement == null ? void 0 : commentScriptElement.textContent) || (commentScriptElement == null ? void 0 : commentScriptElement.innerHTML) || "";
              const parent = commentScriptElement.parentNode;
              parent == null ? void 0 : parent.removeChild(commentScriptElement);
              const script = document.createElement("script");
              script.type = "text/javascript";
              script.appendChild(document.createTextNode(code));
              parent == null ? void 0 : parent.appendChild(script);
            });
          }
        }
        const nextPaginationElement = doc.querySelector("#moment-list-pagination a");
        if (nextPaginationElement) {
          targetElement.href = nextPaginationElement.href;
        } else {
          paginationElement.innerHTML = "";
        }
      }).catch((error) => {
        console.error(error);
      }).finally(() => {
        targetElement.classList.remove("loading");
        targetElement.textContent = sakura.translate("page.moments.loadmore", "加载更多...");
        if (sakura.$localize) {
          sakura.$localize(".moments-inner");
        }
      });
    });
  }
  registerMomentItem(containerElement) {
    const momentContainerElement = containerElement || document.querySelector(".moments-container .moments-inner");
    if (!momentContainerElement) {
      return;
    }
    const momentItemElements = momentContainerElement == null ? void 0 : momentContainerElement.querySelectorAll(".moments-item");
    if (!momentItemElements || momentItemElements.length <= 0) {
      return;
    }
    momentItemElements.forEach((momentItemElement) => {
      this.registerMomentItemLike(momentItemElement);
      this.registerMomentItemComment(momentItemElement);
    });
  }
  registerMomentItemLike(itemElement) {
    const likedIds = JSON.parse(localStorage.getItem("momentlikedIds") || "[]");
    const likeButtonElement = itemElement.querySelector(".moment-tools .moment-like");
    if (!likeButtonElement) {
      return;
    }
    const momentName = itemElement.getAttribute("data-name") || "";
    if (likedIds && (likedIds == null ? void 0 : likedIds.includes(momentName))) {
      likeButtonElement.classList.add("on");
      return;
    }
    likeButtonElement.addEventListener(
      "click",
      () => {
        let upvoteCount = Number(likeButtonElement.getAttribute("data-links") || "0");
        HaloApi.like("moment.halo.run", "moments", momentName).then(() => {
          upvoteCount += 1;
          likedIds.push(momentName);
          likeButtonElement.classList.add("on");
          likeButtonElement.setAttribute("data-links", upvoteCount.toString());
          const likeTitleElement = likeButtonElement.querySelector(".moment-like-text");
          if (likeTitleElement) {
            likeTitleElement.textContent = upvoteCount.toString();
          }
          localStorage.setItem("momentlikedIds", JSON.stringify(likedIds));
        });
      },
      { once: true }
    );
  }
  registerMomentItemComment(itemElement) {
    const commentButtonElement = itemElement.querySelector(".moment-tools .comment-js");
    if (!commentButtonElement) {
      return;
    }
    commentButtonElement.addEventListener("click", () => {
      const commentBoxElement = itemElement.querySelector(".comment-box");
      commentBoxElement == null ? void 0 : commentBoxElement.classList.toggle("is-show");
    });
  }
}
__decorateClass([
  documentFunction()
], Moments.prototype, "registerMomentListPagination", 1);
__decorateClass([
  documentFunction()
], Moments.prototype, "registerMomentItem", 1);
