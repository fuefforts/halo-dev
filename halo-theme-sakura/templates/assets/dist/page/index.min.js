import { d as documentFunction, _ as __vitePreload, s as sakura } from "../main.min.js";
import "../assets/_commonjsHelpers-ca272635.js";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Index {
  registerArrowDown() {
    const arrowDownElement = document.querySelector(".headertop-down");
    if (arrowDownElement) {
      __vitePreload(() => Promise.resolve({}), true ? ["css/font-awesome-animation.min.min.css"] : void 0);
    }
    arrowDownElement == null ? void 0 : arrowDownElement.addEventListener("click", () => {
      var _a;
      const contentOffset = ((_a = document.querySelector(".site-content")) == null ? void 0 : _a.getBoundingClientRect().top) || 0;
      window.scrollTo({
        top: contentOffset + +window.pageYOffset,
        behavior: "smooth"
      });
    });
  }
  registerBackgroundChangeEvent() {
    const backgorundElement = document.querySelector(".bg-change-js");
    if (!backgorundElement) {
      return;
    }
    const backgroundNextBotton = document.getElementById("bg-next");
    const backgroundPrevBotton = document.getElementById("bg-prev");
    const backgroundLoopSize = (sakura.getThemeConfig("random_image", "rimage_cover_back_num", Number) || 0).valueOf();
    backgroundNextBotton == null ? void 0 : backgroundNextBotton.addEventListener("click", () => {
      let currIndex = Number(backgorundElement.getAttribute("data-currIndex"));
      if (backgroundLoopSize === 0) {
        currIndex = Math.ceil(Math.random() * 99);
      } else {
        currIndex = (currIndex + 1) % backgroundLoopSize;
      }
      handlerChangeBackground(currIndex);
    });
    backgroundPrevBotton == null ? void 0 : backgroundPrevBotton.addEventListener("click", () => {
      let currIndex = Number(backgorundElement.getAttribute("data-currIndex"));
      if (backgroundLoopSize === 0) {
        currIndex = Math.ceil(Math.random() * 99);
      } else {
        currIndex = (currIndex - 1 + backgroundLoopSize) % backgroundLoopSize;
      }
      handlerChangeBackground(currIndex);
    });
    const handlerChangeBackground = (backageImageIndex) => {
      const randomUrl = backgorundElement.getAttribute("data-url");
      backgorundElement.src = `${randomUrl}&t=${backageImageIndex}`;
      backgorundElement.setAttribute("data-currIndex", `${backageImageIndex}`);
    };
  }
  registerBackgroundVideo() {
    const videoContainerElement = document.querySelector(".video-container");
    if (!videoContainerElement) {
      return;
    }
    videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
    const videoStatusElement = videoContainerElement.querySelector(".video-status");
    const focusInfoElement = document.querySelector(".focusinfo");
    const homeWaveElement = document.querySelector(".home-wave");
    const videoPlayButtonElement = videoContainerElement.querySelector(".video-play");
    const videoPauseButtonElement = videoContainerElement.querySelector(".video-pause");
    let videoPlayer = void 0;
    videoPlayButtonElement == null ? void 0 : videoPlayButtonElement.addEventListener("click", async () => {
      videoStatusElement.innerHTML = sakura.translate("home.video.loading", "正在载入视频 ...");
      videoStatusElement.style.bottom = "0";
      __vitePreload(() => import("../assets/video.es-84574e58.js"), true ? ["assets/video.es-84574e58.js","assets/_commonjsHelpers-ca272635.js"] : void 0).then((module) => {
        var _a;
        if (videoPlayer) {
          videoPlayer.play();
          return;
        }
        videoPlayer = module.default(videoContainerElement.querySelector("video"), {
          controls: false,
          controlsBar: false,
          children: ["MediaLoader"],
          autoplay: false,
          preload: "auto",
          muted: false,
          loop: false,
          sources: [
            {
              src: (_a = sakura.getThemeConfig("mainScreen", "bgvideo_url", String)) == null ? void 0 : _a.toString()
            }
          ]
        });
        videoPlayer.on("loadeddata", () => {
          videoStatusElement.style.bottom = "-100px";
          homeWaveElement.style.bottom = "-100px";
          focusInfoElement.style.top = "-999px";
          videoPlayButtonElement.style.display = "none";
          videoPauseButtonElement.style.display = "block";
          videoPlayer.play();
        });
        videoPlayer.on("play", () => {
          videoStatusElement.style.bottom = "-100px";
          homeWaveElement.style.bottom = "-100px";
          focusInfoElement.style.top = "-999px";
          videoPlayButtonElement.style.display = "none";
          videoPauseButtonElement.style.display = "block";
        });
        videoPlayer.on("pause", () => {
          videoStatusElement.innerHTML = sakura.translate("home.video.statu_pause", "已暂停 ...");
          videoStatusElement.style.bottom = "0";
          homeWaveElement.style.bottom = "0";
          focusInfoElement.style.top = "0";
          videoPlayButtonElement.style.display = "block";
          videoPauseButtonElement.style.display = "none";
        });
        videoPlayer.on("waiting", () => {
          videoStatusElement.innerHTML = sakura.translate("home.video.statu_waiting", "加载中 ...");
          videoStatusElement.style.bottom = "0";
        });
        videoPlayer.on("canplay", () => {
          videoStatusElement.style.bottom = "-100px";
        });
        videoPlayer.on("error", () => {
          videoStatusElement.innerHTML = sakura.translate("home.video.statu_error", "视频播放错误");
          setTimeout(() => {
            focusInfoElement.style.top = "0";
            homeWaveElement.style.bottom = "0";
            videoStatusElement.style.bottom = "-100px";
            videoPlayButtonElement.style.display = "block";
            videoPauseButtonElement.style.display = "none";
            videoPlayer.dispose();
            videoPlayer = void 0;
            videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
          }, 2e3);
        });
        videoPlayer.on("ended", () => {
          focusInfoElement.style.top = "0";
          homeWaveElement.style.bottom = "0";
          videoStatusElement.style.bottom = "-100px";
          videoPlayButtonElement.style.display = "block";
          videoPauseButtonElement.style.display = "none";
          videoPlayer.dispose();
          videoPlayer = void 0;
          videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
        });
      }).catch((error) => {
        console.error(error);
        videoStatusElement.innerHTML = sakura.translate("home.video.statu_error", "视频加载失败");
        videoStatusElement.style.bottom = "0";
        setTimeout(() => {
          videoStatusElement.style.bottom = "-100px";
        }, 2e3);
      });
    });
    videoPauseButtonElement == null ? void 0 : videoPauseButtonElement.addEventListener("click", () => {
      if (videoPlayer) {
        videoPlayer.pause();
      }
    });
  }
}
__decorateClass([
  documentFunction()
], Index.prototype, "registerArrowDown", 1);
__decorateClass([
  documentFunction()
], Index.prototype, "registerBackgroundChangeEvent", 1);
__decorateClass([
  documentFunction()
], Index.prototype, "registerBackgroundVideo", 1);
